<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SmartThread.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SmartThread.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Mon Apr 10 16:31:12 2017
<BR><P>
<H3>Maximum Stack Usage =        196 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
smartthread::SmartThread::setEnv(void*) &rArr; smartthread::Task::Task(void*(*)(void*), void*, smartthread::ThreadPool*) &rArr; btask_init &rArr; bthreadpool_put_task &rArr; bcondition_notify &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">NMI_Handler</a><BR>
 <LI><a href="#[a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">HardFault_Handler</a><BR>
 <LI><a href="#[b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">MemManage_Handler</a><BR>
 <LI><a href="#[c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">BusFault_Handler</a><BR>
 <LI><a href="#[d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">UsageFault_Handler</a><BR>
 <LI><a href="#[e]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SVC_Handler</a><BR>
 <LI><a href="#[f]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">AACI_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">AACI_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">AACI_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[c]">BusFault_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[23]">CAN_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[21]">CHLCD_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[1d]">CLCD_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[26]">CPU_CLCD_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[1e]">ENET_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[22]">FLEXRAY_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[a]">HardFault_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[25]">I2C_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[24]">LIN_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[16]">MCIA_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[17]">MCIB_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[b]">MemManage_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from switch.o(.emb_text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[13]">RTC_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[38]">Reset_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[28]">SPI_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[11]">SysTick_Handler</a> from bthread.o(i.SysTick_Handler) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[29]">SystemInit</a> from system_armcm3.o(i.SystemInit) referenced from startup_armcm3.o(.text)
 <LI><a href="#[14]">TIM0_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[18]">UART0_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[19]">UART1_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[1a]">UART2_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[27]">UART3_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[1b]">UART4_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[1f]">USBDC_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[20]">USBHC_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[d]">UsageFault_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[12]">WDT_IRQHandler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[34]">smartthread::SmartThread::timers_thread(void*)</a> from main.o(i._ZN11smartthread11SmartThread13timers_threadEPv) referenced from main.o(i.__sti___8_Main_cpp_b48cbc19)
 <LI><a href="#[33]">smartthread::SmartThread::setEnv(void*)</a> from main.o(i._ZN11smartthread11SmartThread6setEnvEPv) referenced from main.o(i.__sti___8_Main_cpp_b48cbc19)
 <LI><a href="#[35]">smartthread::SmartThread::~SmartThread()</a> from main.o(i._ZN11smartthread11SmartThreadD1Ev) referenced from main.o(i.__sti___8_Main_cpp_b48cbc19)
 <LI><a href="#[39]">__main</a> from __main.o(!!!main) referenced from startup_armcm3.o(.text)
 <LI><a href="#[37]">__sti___8_Main_cpp_b48cbc19</a> from main.o(i.__sti___8_Main_cpp_b48cbc19) referenced from main.o(.init_array)
 <LI><a href="#[36]">bthreadpool_run</a> from bthreadpool.o(i.bthreadpool_run) referenced from bthreadpool.o(i.bthreadpool_init)
 <LI><a href="#[2b]">fun1</a> from functions.o(i.fun1) referenced from main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
 <LI><a href="#[2c]">fun2</a> from functions.o(i.fun2) referenced from main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
 <LI><a href="#[2d]">fun3</a> from functions.o(i.fun3) referenced from main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
 <LI><a href="#[2e]">fun4</a> from functions.o(i.fun4) referenced from main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
 <LI><a href="#[2f]">fun5</a> from functions.o(i.fun5) referenced from main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
 <LI><a href="#[30]">timer1</a> from functions.o(i.timer1) referenced from main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
 <LI><a href="#[31]">timer2</a> from functions.o(i.timer2) referenced from main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
 <LI><a href="#[32]">timer3</a> from functions.o(i.timer3) referenced from main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[39]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a5]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a6]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3f]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[a7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[48]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a8]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[40]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[a9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[42]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[ae]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[af]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[4d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[43]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[bf]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[c2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[c3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[c4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[45]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[47]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[49]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; bthreads_start
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[50]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, switch.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm3.o(.text))

<P><STRONG><a name="[c8]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>AACI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CHLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CPU_CLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>FLEXRAY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>LIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>MCIA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>MCIB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USBDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USBHC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4b]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Main_cpp_b48cbc19
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartthread::Timer::Timer(unsigned, unsigned, void*(*)(void*), void*, bTimerType)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartthread::SmartThread::setEnv(void*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_create
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[53]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[52]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[44]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[cd]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ce]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[cf]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[58]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[41]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[5a]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[4f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[46]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[57]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[59]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[d1]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[5c]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[5e]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[5f]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bthread.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SysTick_Handler &rArr; bthread_systick_handler &rArr; btimer_in_systick &rArr; btimer_run_rt &rArr; bmemblock_release_mem &rArr; bcondition_notify &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_systick_handler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm3.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>smartthread::SmartThread::timers_thread(void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._ZN11smartthread11SmartThread13timers_threadEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = smartthread::SmartThread::timers_thread(void*) &rArr; btimer_run_nrt_in_thread &rArr; bmemblock_release_mem &rArr; bcondition_notify &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_run_nrt_in_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_Main_cpp_b48cbc19)
</UL>
<P><STRONG><a name="[33]"></a>smartthread::SmartThread::setEnv(void*)</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, main.o(i._ZN11smartthread11SmartThread6setEnvEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = smartthread::SmartThread::setEnv(void*) &rArr; smartthread::Task::Task(void*(*)(void*), void*, smartthread::ThreadPool*) &rArr; btask_init &rArr; bthreadpool_put_task &rArr; bcondition_notify &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_get_mem
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartthread::Timer::Timer(unsigned, unsigned, void*(*)(void*), void*, bTimerType)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartthread::Task::Task(void*(*)(void*), void*, smartthread::ThreadPool*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_set_systick_period
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_Main_cpp_b48cbc19)
</UL>
<P><STRONG><a name="[35]"></a>smartthread::SmartThread::~SmartThread()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i._ZN11smartthread11SmartThreadD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_Main_cpp_b48cbc19)
</UL>
<P><STRONG><a name="[d4]"></a>smartthread::SmartThread::~SmartThread__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN11smartthread11SmartThreadD1Ev), UNUSED)

<P><STRONG><a name="[67]"></a>smartthread::Task::Task(void*(*)(void*), void*, smartthread::ThreadPool*)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(i._ZN11smartthread4TaskC1EPFYPvS1_ES1_PNS_10ThreadPoolE))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = smartthread::Task::Task(void*(*)(void*), void*, smartthread::ThreadPool*) &rArr; btask_init &rArr; bthreadpool_put_task &rArr; bcondition_notify &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btask_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_get_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartthread::SmartThread::setEnv(void*)
</UL>

<P><STRONG><a name="[d5]"></a>smartthread::Task::Task__sub_object(void*(*)(void*), void*, smartthread::ThreadPool*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, main.o(i._ZN11smartthread4TaskC1EPFYPvS1_ES1_PNS_10ThreadPoolE), UNUSED)

<P><STRONG><a name="[68]"></a>smartthread::Timer::Timer(unsigned, unsigned, void*(*)(void*), void*, bTimerType)</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, main.o(i._ZN11smartthread5TimerC1EjjPFYPvS1_ES1_10bTimerType))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = smartthread::Timer::Timer(unsigned, unsigned, void*(*)(void*), void*, bTimerType) &rArr; bmemblock_get_mem &rArr; bcondition_wait &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_get_mem
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartthread::SmartThread::setEnv(void*)
</UL>

<P><STRONG><a name="[d6]"></a>smartthread::Timer::Timer__sub_object(unsigned, unsigned, void*(*)(void*), void*, bTimerType)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, main.o(i._ZN11smartthread5TimerC1EjjPFYPvS1_ES1_10bTimerType), UNUSED)

<P><STRONG><a name="[9b]"></a>bbitmap_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bthread.o(i.bbitmap_clear))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_unready
</UL>

<P><STRONG><a name="[94]"></a>bbitmap_get_firstset</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, bthread.o(i.bbitmap_get_firstset))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_get_readyed
</UL>

<P><STRONG><a name="[6d]"></a>bbitmap_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bthread.o(i.bbitmap_init))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Main_cpp_b48cbc19
</UL>

<P><STRONG><a name="[96]"></a>bbitmap_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bthread.o(i.bbitmap_set))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_ready
</UL>

<P><STRONG><a name="[8c]"></a>bcondition_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bcondition.o(i.bcondition_init))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_init
</UL>

<P><STRONG><a name="[71]"></a>bcondition_notify</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bcondition.o(i.bcondition_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bcondition_notify &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_wakeup
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_wait_count
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_wait
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_release
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_lock_this
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_schedule
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_release_mem
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_put_task
</UL>

<P><STRONG><a name="[78]"></a>bcondition_wait</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bcondition.o(i.bcondition_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bcondition_wait &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_wakeup
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_wait_count
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_wait
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_release
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_lock_this
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_schedule
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_get_mem
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_take_task
</UL>

<P><STRONG><a name="[79]"></a>bevent_init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bevent.o(i.bevent_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bevent_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsem_init
</UL>

<P><STRONG><a name="[7b]"></a>bevent_remove</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bevent.o(i.bevent_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bevent_remove &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_remove
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreads_delayed_wakeup
</UL>

<P><STRONG><a name="[7d]"></a>bevent_wait</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bevent.o(i.bevent_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bevent_wait &rArr; bthread_unready &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_add_last
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_unready
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_time_wait
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_wait
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_lock
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsem_wait
</UL>

<P><STRONG><a name="[81]"></a>bevent_wait_count</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bevent.o(i.bevent_wait_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bevent_wait_count
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_count
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_wait_count
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_unlock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsem_notify
</UL>

<P><STRONG><a name="[83]"></a>bevent_wakeup</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, bevent.o(i.bevent_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_remove_first
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_time_wakeup
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_ready
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_wakeup
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_unlock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsem_notify
</UL>

<P><STRONG><a name="[7f]"></a>blist_add_last</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, blist.o(i.blist_add_last))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_release_mem
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wait
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_time_wait
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_ready
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_put_task
</UL>

<P><STRONG><a name="[82]"></a>blist_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, blist.o(i.blist_count))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wait_count
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_unready
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_take_task
</UL>

<P><STRONG><a name="[95]"></a>blist_first</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, blist.o(i.blist_first))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_get_readyed
</UL>

<P><STRONG><a name="[7a]"></a>blist_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, blist.o(i.blist_init))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threads_readyed_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threads_delayed_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_init
</UL>

<P><STRONG><a name="[7c]"></a>blist_remove</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, blist.o(i.blist_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bnode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_run_rt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_run_nrt_in_thread
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_remove
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_unready
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_time_wakeup
</UL>

<P><STRONG><a name="[84]"></a>blist_remove_first</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, blist.o(i.blist_remove_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = blist_remove_first
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bnode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wakeup
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_get_mem
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_take_task
</UL>

<P><STRONG><a name="[6e]"></a>bmemblock_all_init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bmemblock.o(i.bmemblock_all_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = bmemblock_all_init &rArr; bmemblock_init &rArr; bmutexlock_init &rArr; bevent_init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Main_cpp_b48cbc19
</UL>

<P><STRONG><a name="[64]"></a>bmemblock_get_mem</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bmemblock.o(i.bmemblock_get_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bmemblock_get_mem &rArr; bcondition_wait &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_wait
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_unlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_lock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_remove_first
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartthread::Timer::Timer(unsigned, unsigned, void*(*)(void*), void*, bTimerType)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartthread::Task::Task(void*(*)(void*), void*, smartthread::ThreadPool*)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartthread::SmartThread::setEnv(void*)
</UL>

<P><STRONG><a name="[88]"></a>bmemblock_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bmemblock.o(i.bmemblock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = bmemblock_init &rArr; bmutexlock_init &rArr; bevent_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bnode_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_add_last
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_all_init
</UL>

<P><STRONG><a name="[8d]"></a>bmemblock_release_mem</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bmemblock.o(i.bmemblock_release_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bmemblock_release_mem &rArr; bcondition_notify &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_notify
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_unlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_lock
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bnode_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_add_last
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_run_rt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_run_nrt_in_thread
</UL>

<P><STRONG><a name="[8b]"></a>bmutexlock_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bmutex.o(i.bmutexlock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bmutexlock_init &rArr; bevent_init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_init
</UL>

<P><STRONG><a name="[89]"></a>bmutexlock_lock</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, bmutex.o(i.bmutexlock_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bmutexlock_lock &rArr; bevent_wait &rArr; bthread_unready &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wait
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_unready
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_schedule
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_ready
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_release_mem
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_get_mem
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_take_task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_put_task
</UL>

<P><STRONG><a name="[75]"></a>bmutexlock_lock_this</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bmutex.o(i.bmutexlock_lock_this))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bmutexlock_lock_this
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_wait
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_notify
</UL>

<P><STRONG><a name="[73]"></a>bmutexlock_release</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bmutex.o(i.bmutexlock_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bmutexlock_release
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_wait
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_notify
</UL>

<P><STRONG><a name="[8a]"></a>bmutexlock_unlock</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, bmutex.o(i.bmutexlock_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bmutexlock_unlock &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wakeup
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wait_count
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_unready
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_schedule
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_ready
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_release_mem
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_get_mem
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_take_task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_put_task
</UL>

<P><STRONG><a name="[76]"></a>bmutexlock_wait</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bmutex.o(i.bmutexlock_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bmutexlock_wait &rArr; bevent_wait &rArr; bthread_unready &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wait
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_wait
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_notify
</UL>

<P><STRONG><a name="[72]"></a>bmutexlock_wait_count</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bmutex.o(i.bmutexlock_wait_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bmutexlock_wait_count &rArr; bevent_wait_count
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wait_count
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_wait
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_notify
</UL>

<P><STRONG><a name="[74]"></a>bmutexlock_wakeup</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, bmutex.o(i.bmutexlock_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wakeup
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_wait
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_notify
</UL>

<P><STRONG><a name="[87]"></a>bnode_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, blist.o(i.bnode_init))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_release_mem
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_remove_first
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btask_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_remove
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_create
</UL>

<P><STRONG><a name="[6f]"></a>bsem_all_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsem.o(i.bsem_all_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsem_all_init &rArr; bsem_init &rArr; bevent_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Main_cpp_b48cbc19
</UL>

<P><STRONG><a name="[8e]"></a>bsem_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsem.o(i.bsem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsem_init &rArr; bevent_init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsem_all_init
</UL>

<P><STRONG><a name="[8f]"></a>bsem_notify</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsem.o(i.bsem_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsem_notify &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wakeup
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wait_count
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_schedule
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_run_nrt_in_systick
</UL>

<P><STRONG><a name="[90]"></a>bsem_wait</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsem.o(i.bsem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsem_wait &rArr; bevent_wait &rArr; bthread_unready &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wait
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_schedule
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_run_nrt_in_thread
</UL>

<P><STRONG><a name="[6a]"></a>btask_init</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, bthreadpool.o(i.btask_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = btask_init &rArr; bthreadpool_put_task &rArr; bcondition_notify &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bnode_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_put_task
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartthread::Task::Task(void*(*)(void*), void*, smartthread::ThreadPool*)
</UL>

<P><STRONG><a name="[70]"></a>bthread_create</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bthread.o(i.bthread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bthread_create &rArr; bthread_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bnode_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_ready
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_stack_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Main_cpp_b48cbc19
</UL>

<P><STRONG><a name="[60]"></a>bthread_enter_critical</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, switch.o(i.bthread_enter_critical))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_wait
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_notify
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_wakeup
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_wait_count
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_wait
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_unlock
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_release
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_lock_this
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_lock
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsem_wait
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsem_notify
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wakeup
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wait_count
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wait
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_run_nrt_in_thread
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_remove
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_schedule
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[62]"></a>bthread_exit_critical</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, switch.o(i.bthread_exit_critical))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_wait
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_notify
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_wakeup
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_wait_count
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_wait
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_unlock
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_release
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_lock_this
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_lock
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsem_wait
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsem_notify
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wakeup
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wait_count
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wait
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_run_nrt_in_thread
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_remove
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_schedule
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[93]"></a>bthread_get_readyed</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bthread.o(i.bthread_get_readyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bthread_get_readyed
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_first
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbitmap_get_firstset
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_schedule
</UL>

<P><STRONG><a name="[9a]"></a>bthread_get_ticks</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bthread.o(i.bthread_get_ticks))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_time_wait
</UL>

<P><STRONG><a name="[86]"></a>bthread_ready</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bthread.o(i.bthread_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bthread_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_add_last
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbitmap_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_unlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_lock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wakeup
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_systick_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_create
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreads_delayed_wakeup
</UL>

<P><STRONG><a name="[9e]"></a>bthread_run_first</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, switch.o(i.bthread_run_first))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreads_start
</UL>

<P><STRONG><a name="[77]"></a>bthread_schedule</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bthread.o(i.bthread_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bthread_schedule &rArr; bthread_get_readyed
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_get_readyed
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_switch
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_wait
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_notify
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_unlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_lock
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsem_wait
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsem_notify
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_systick_handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreads_delayed_wakeup
</UL>

<P><STRONG><a name="[69]"></a>bthread_set_systick_period</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, switch.o(i.bthread_set_systick_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bthread_set_systick_period
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartthread::SmartThread::setEnv(void*)
</UL>

<P><STRONG><a name="[97]"></a>bthread_switch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, switch.o(i.bthread_switch))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_schedule
</UL>

<P><STRONG><a name="[61]"></a>bthread_systick_handler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bthread.o(i.bthread_systick_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = bthread_systick_handler &rArr; btimer_in_systick &rArr; btimer_run_rt &rArr; bmemblock_release_mem &rArr; bcondition_notify &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_in_systick
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_unready
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_schedule
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_ready
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreads_delayed_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[80]"></a>bthread_time_wait</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bthread.o(i.bthread_time_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bthread_time_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_add_last
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_get_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wait
</UL>

<P><STRONG><a name="[85]"></a>bthread_time_wakeup</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bthread.o(i.bthread_time_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wakeup
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreads_delayed_wakeup
</UL>

<P><STRONG><a name="[7e]"></a>bthread_unready</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bthread.o(i.bthread_unready))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bthread_unready &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_remove
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_count
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbitmap_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_unlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_lock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_wait
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_systick_handler
</UL>

<P><STRONG><a name="[66]"></a>bthreadpool_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bthreadpool.o(i.bthreadpool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = bthreadpool_init &rArr; bmemblock_get_mem &rArr; bcondition_wait &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_get_mem
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_create
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartthread::SmartThread::setEnv(void*)
</UL>

<P><STRONG><a name="[91]"></a>bthreadpool_put_task</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bthreadpool.o(i.bthreadpool_put_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bthreadpool_put_task &rArr; bcondition_notify &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_notify
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_unlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_lock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_add_last
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btask_init
</UL>

<P><STRONG><a name="[36]"></a>bthreadpool_run</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bthreadpool.o(i.bthreadpool_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bthreadpool_run &rArr; bthreadpool_take_task &rArr; bcondition_wait &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_take_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bthreadpool.o(i.bthreadpool_init)
</UL>
<P><STRONG><a name="[9c]"></a>bthreadpool_take_task</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bthreadpool.o(i.bthreadpool_take_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bthreadpool_take_task &rArr; bcondition_wait &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcondition_wait
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_unlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmutexlock_lock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_remove_first
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_count
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreadpool_run
</UL>

<P><STRONG><a name="[9d]"></a>bthreads_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bthread.o(i.bthreads_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bthreads_start
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_run_first
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>btimer_in_systick</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, btimer.o(i.btimer_in_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = btimer_in_systick &rArr; btimer_run_rt &rArr; bmemblock_release_mem &rArr; bcondition_notify &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_run_rt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_run_nrt_in_systick
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_systick_handler
</UL>

<P><STRONG><a name="[6b]"></a>btimer_init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, btimer.o(i.btimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = btimer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bnode_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_add_last
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_get_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartthread::Timer::Timer(unsigned, unsigned, void*(*)(void*), void*, bTimerType)
</UL>

<P><STRONG><a name="[a0]"></a>btimer_run_nrt_in_systick</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, btimer.o(i.btimer_run_nrt_in_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = btimer_run_nrt_in_systick &rArr; bsem_notify &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsem_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_in_systick
</UL>

<P><STRONG><a name="[63]"></a>btimer_run_nrt_in_thread</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, btimer.o(i.btimer_run_nrt_in_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = btimer_run_nrt_in_thread &rArr; bmemblock_release_mem &rArr; bcondition_notify &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsem_wait
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_release_mem
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_remove
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_exit_critical
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smartthread::SmartThread::timers_thread(void*)
</UL>

<P><STRONG><a name="[9f]"></a>btimer_run_rt</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, btimer.o(i.btimer_run_rt))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = btimer_run_rt &rArr; bmemblock_release_mem &rArr; bcondition_notify &rArr; bmutexlock_wakeup &rArr; bevent_wakeup &rArr; bthread_time_wakeup &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_release_mem
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btimer_in_systick
</UL>

<P><STRONG><a name="[a1]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, functions.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun3
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun2
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fun1
</UL>

<P><STRONG><a name="[2b]"></a>fun1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, functions.o(i.fun1))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
</UL>
<P><STRONG><a name="[2c]"></a>fun2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, functions.o(i.fun2))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
</UL>
<P><STRONG><a name="[2d]"></a>fun3</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, functions.o(i.fun3))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
</UL>
<P><STRONG><a name="[2e]"></a>fun4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, functions.o(i.fun4))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
</UL>
<P><STRONG><a name="[2f]"></a>fun5</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, functions.o(i.fun5))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
</UL>
<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = main &rArr; bthreads_start
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthreads_start
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_get_readyed
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6c]"></a>threads_all_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, blist.o(i.threads_all_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = threads_all_list_init &rArr; timers_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threads_readyed_init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threads_delayed_init
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Main_cpp_b48cbc19
</UL>

<P><STRONG><a name="[a3]"></a>threads_delayed_init</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, blist.o(i.threads_delayed_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = threads_delayed_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threads_all_list_init
</UL>

<P><STRONG><a name="[a2]"></a>threads_readyed_init</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, blist.o(i.threads_readyed_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = threads_readyed_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threads_all_list_init
</UL>

<P><STRONG><a name="[30]"></a>timer1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, functions.o(i.timer1))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
</UL>
<P><STRONG><a name="[31]"></a>timer2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, functions.o(i.timer2))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
</UL>
<P><STRONG><a name="[32]"></a>timer3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, functions.o(i.timer3))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._ZN11smartthread11SmartThread6setEnvEPv)
</UL>
<P><STRONG><a name="[a4]"></a>timers_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, blist.o(i.timers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timers_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threads_all_list_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[92]"></a>bthread_stack_init</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, bthread.o(i.bthread_stack_init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_create
</UL>

<P><STRONG><a name="[98]"></a>bthreads_delayed_wakeup</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bthread.o(i.bthreads_delayed_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bthreads_delayed_wakeup &rArr; bevent_remove &rArr; blist_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bevent_remove
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_time_wakeup
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_schedule
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_systick_handler
</UL>

<P><STRONG><a name="[37]"></a>__sti___8_Main_cpp_b48cbc19</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, main.o(i.__sti___8_Main_cpp_b48cbc19))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = __sti___8_Main_cpp_b48cbc19 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threads_all_list_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsem_all_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmemblock_all_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bthread_create
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbitmap_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
